// Code generated by protoc-gen-rpcx. DO NOT EDIT.
// versions:
// - protoc-gen-rpcx v0.3.0
// - protoc          (unknown)
// source: rpc/chat/chat.proto

package chat

import (
	context "context"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO
var _ = server.NewServer
var _ = client.NewClient
var _ = protocol.NewMessage

// ================== interface skeleton ===================
type ChatAble interface {
	// ChatAble can be used for interface verification.

	// SendMsg is server rpc method as defined
	SendMsg(ctx context.Context, args *SendReq, reply *SendRsp) (err error)

	// SyncMsg is server rpc method as defined
	SyncMsg(ctx context.Context, args *SyncMsgReq, reply *SyncMsgRsp) (err error)

	// MsgAck is server rpc method as defined
	MsgAck(ctx context.Context, args *MsgAckReq, reply *MsgAckRsp) (err error)

	// Recall is server rpc method as defined
	Recall(ctx context.Context, args *RecallReq, reply *RecallRsp) (err error)

	// DeleteMsg is server rpc method as defined
	DeleteMsg(ctx context.Context, args *DeleteMsgReq, reply *DeleteMsgRsp) (err error)
}

// ================== server skeleton ===================
type ChatImpl struct{}

// ServeForChat starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForChat(addr string) error {
	s := server.NewServer()
	s.RegisterName("Chat", new(ChatImpl), "")
	return s.Serve("tcp", addr)
}

// SendMsg is server rpc method as defined
func (s *ChatImpl) SendMsg(ctx context.Context, args *SendReq, reply *SendRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = SendRsp{}

	return nil
}

// SyncMsg is server rpc method as defined
func (s *ChatImpl) SyncMsg(ctx context.Context, args *SyncMsgReq, reply *SyncMsgRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = SyncMsgRsp{}

	return nil
}

// MsgAck is server rpc method as defined
func (s *ChatImpl) MsgAck(ctx context.Context, args *MsgAckReq, reply *MsgAckRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = MsgAckRsp{}

	return nil
}

// Recall is server rpc method as defined
func (s *ChatImpl) Recall(ctx context.Context, args *RecallReq, reply *RecallRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = RecallRsp{}

	return nil
}

// DeleteMsg is server rpc method as defined
func (s *ChatImpl) DeleteMsg(ctx context.Context, args *DeleteMsgReq, reply *DeleteMsgRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = DeleteMsgRsp{}

	return nil
}

//================== client stub ===================
// Chat is a client wrapped XClient.
type ChatClient struct {
	xclient client.XClient
}

// NewChatClient wraps a XClient as ChatClient.
// You can pass a shared XClient object created by NewXClientForChat.
func NewChatClient(xclient client.XClient) *ChatClient {
	return &ChatClient{xclient: xclient}
}

// NewXClientForChat creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForChat(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("Chat", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// SendMsg is client rpc method as defined
func (c *ChatClient) SendMsg(ctx context.Context, args *SendReq) (reply *SendRsp, err error) {
	reply = &SendRsp{}
	err = c.xclient.Call(ctx, "SendMsg", args, reply)
	return reply, err
}

// SyncMsg is client rpc method as defined
func (c *ChatClient) SyncMsg(ctx context.Context, args *SyncMsgReq) (reply *SyncMsgRsp, err error) {
	reply = &SyncMsgRsp{}
	err = c.xclient.Call(ctx, "SyncMsg", args, reply)
	return reply, err
}

// MsgAck is client rpc method as defined
func (c *ChatClient) MsgAck(ctx context.Context, args *MsgAckReq) (reply *MsgAckRsp, err error) {
	reply = &MsgAckRsp{}
	err = c.xclient.Call(ctx, "MsgAck", args, reply)
	return reply, err
}

// Recall is client rpc method as defined
func (c *ChatClient) Recall(ctx context.Context, args *RecallReq) (reply *RecallRsp, err error) {
	reply = &RecallRsp{}
	err = c.xclient.Call(ctx, "Recall", args, reply)
	return reply, err
}

// DeleteMsg is client rpc method as defined
func (c *ChatClient) DeleteMsg(ctx context.Context, args *DeleteMsgReq) (reply *DeleteMsgRsp, err error) {
	reply = &DeleteMsgRsp{}
	err = c.xclient.Call(ctx, "DeleteMsg", args, reply)
	return reply, err
}

//================== oneclient stub ===================
// ChatOneClient is a client wrapped oneClient.
type ChatOneClient struct {
	serviceName string
	oneclient   *client.OneClient
}

// NewChatOneClient wraps a OneClient as ChatOneClient.
// You can pass a shared OneClient object created by NewOneClientForChat.
func NewChatOneClient(oneclient *client.OneClient) *ChatOneClient {
	return &ChatOneClient{
		serviceName: "Chat",
		oneclient:   oneclient,
	}
}

// ======================================================

// SendMsg is client rpc method as defined
func (c *ChatOneClient) SendMsg(ctx context.Context, args *SendReq) (reply *SendRsp, err error) {
	reply = &SendRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "SendMsg", args, reply)
	return reply, err
}

// SyncMsg is client rpc method as defined
func (c *ChatOneClient) SyncMsg(ctx context.Context, args *SyncMsgReq) (reply *SyncMsgRsp, err error) {
	reply = &SyncMsgRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "SyncMsg", args, reply)
	return reply, err
}

// MsgAck is client rpc method as defined
func (c *ChatOneClient) MsgAck(ctx context.Context, args *MsgAckReq) (reply *MsgAckRsp, err error) {
	reply = &MsgAckRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "MsgAck", args, reply)
	return reply, err
}

// Recall is client rpc method as defined
func (c *ChatOneClient) Recall(ctx context.Context, args *RecallReq) (reply *RecallRsp, err error) {
	reply = &RecallRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Recall", args, reply)
	return reply, err
}

// DeleteMsg is client rpc method as defined
func (c *ChatOneClient) DeleteMsg(ctx context.Context, args *DeleteMsgReq) (reply *DeleteMsgRsp, err error) {
	reply = &DeleteMsgRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "DeleteMsg", args, reply)
	return reply, err
}
