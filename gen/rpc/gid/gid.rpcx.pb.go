// Code generated by protoc-gen-rpcx. DO NOT EDIT.
// versions:
// - protoc-gen-rpcx v0.3.0
// - protoc          (unknown)
// source: rpc/gid/gid.proto

package gid

import (
	context "context"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO
var _ = server.NewServer
var _ = client.NewClient
var _ = protocol.NewMessage

// ================== interface skeleton ===================
type GidAble interface {
	// GidAble can be used for interface verification.

	// GetServerId is server rpc method as defined
	GetServerId(ctx context.Context, args *GetServerIdReq, reply *GetServerIdRsp) (err error)

	// Get is server rpc method as defined
	Get(ctx context.Context, args *GetReq, reply *GetRsp) (err error)

	// GetBatch is server rpc method as defined
	GetBatch(ctx context.Context, args *GetBatchReq, reply *GetBatchRsp) (err error)
}

// ================== server skeleton ===================
type GidImpl struct{}

// ServeForGid starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForGid(addr string) error {
	s := server.NewServer()
	s.RegisterName("Gid", new(GidImpl), "")
	return s.Serve("tcp", addr)
}

// GetServerId is server rpc method as defined
func (s *GidImpl) GetServerId(ctx context.Context, args *GetServerIdReq, reply *GetServerIdRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GetServerIdRsp{}

	return nil
}

// Get is server rpc method as defined
func (s *GidImpl) Get(ctx context.Context, args *GetReq, reply *GetRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GetRsp{}

	return nil
}

// GetBatch is server rpc method as defined
func (s *GidImpl) GetBatch(ctx context.Context, args *GetBatchReq, reply *GetBatchRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GetBatchRsp{}

	return nil
}

//================== client stub ===================
// Gid is a client wrapped XClient.
type GidClient struct {
	xclient client.XClient
}

// NewGidClient wraps a XClient as GidClient.
// You can pass a shared XClient object created by NewXClientForGid.
func NewGidClient(xclient client.XClient) *GidClient {
	return &GidClient{xclient: xclient}
}

// NewXClientForGid creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForGid(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("Gid", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// GetServerId is client rpc method as defined
func (c *GidClient) GetServerId(ctx context.Context, args *GetServerIdReq) (reply *GetServerIdRsp, err error) {
	reply = &GetServerIdRsp{}
	err = c.xclient.Call(ctx, "GetServerId", args, reply)
	return reply, err
}

// Get is client rpc method as defined
func (c *GidClient) Get(ctx context.Context, args *GetReq) (reply *GetRsp, err error) {
	reply = &GetRsp{}
	err = c.xclient.Call(ctx, "Get", args, reply)
	return reply, err
}

// GetBatch is client rpc method as defined
func (c *GidClient) GetBatch(ctx context.Context, args *GetBatchReq) (reply *GetBatchRsp, err error) {
	reply = &GetBatchRsp{}
	err = c.xclient.Call(ctx, "GetBatch", args, reply)
	return reply, err
}

//================== oneclient stub ===================
// GidOneClient is a client wrapped oneClient.
type GidOneClient struct {
	serviceName string
	oneclient   *client.OneClient
}

// NewGidOneClient wraps a OneClient as GidOneClient.
// You can pass a shared OneClient object created by NewOneClientForGid.
func NewGidOneClient(oneclient *client.OneClient) *GidOneClient {
	return &GidOneClient{
		serviceName: "Gid",
		oneclient:   oneclient,
	}
}

// ======================================================

// GetServerId is client rpc method as defined
func (c *GidOneClient) GetServerId(ctx context.Context, args *GetServerIdReq) (reply *GetServerIdRsp, err error) {
	reply = &GetServerIdRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "GetServerId", args, reply)
	return reply, err
}

// Get is client rpc method as defined
func (c *GidOneClient) Get(ctx context.Context, args *GetReq) (reply *GetRsp, err error) {
	reply = &GetRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Get", args, reply)
	return reply, err
}

// GetBatch is client rpc method as defined
func (c *GidOneClient) GetBatch(ctx context.Context, args *GetBatchReq) (reply *GetBatchRsp, err error) {
	reply = &GetBatchRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "GetBatch", args, reply)
	return reply, err
}
