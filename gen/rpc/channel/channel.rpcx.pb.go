// Code generated by protoc-gen-rpcx. DO NOT EDIT.
// versions:
// - protoc-gen-rpcx v0.3.0
// - protoc          (unknown)
// source: rpc/channel/channel.proto

package channel

import (
	context "context"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO
var _ = server.NewServer
var _ = client.NewClient
var _ = protocol.NewMessage

// ================== interface skeleton ===================
type ChannelAble interface {
	// ChannelAble can be used for interface verification.

	// Sync is server rpc method as defined
	Sync(ctx context.Context, args *SyncReq, reply *SyncRsp) (err error)

	// Create is server rpc method as defined
	Create(ctx context.Context, args *CreateReq, reply *CreateRsp) (err error)

	// GetJoinedList is server rpc method as defined
	GetJoinedList(ctx context.Context, args *GetJoinedListReq, reply *GetJoinedListRsp) (err error)

	// Join is server rpc method as defined
	Join(ctx context.Context, args *JoinReq, reply *JoinRsp) (err error)

	// InviteUser is server rpc method as defined
	InviteUser(ctx context.Context, args *InviteUserReq, reply *InviteUserRsp) (err error)

	// Quit is server rpc method as defined
	Quit(ctx context.Context, args *QuitReq, reply *QuitRsp) (err error)

	// Kick is server rpc method as defined
	Kick(ctx context.Context, args *KickReq, reply *KickRsp) (err error)

	// Dismiss is server rpc method as defined
	Dismiss(ctx context.Context, args *DismissReq, reply *DismissRsp) (err error)

	// GetMemberList is server rpc method as defined
	GetMemberList(ctx context.Context, args *GetMemberListReq, reply *GetMemberListRsp) (err error)

	// GetMemberInfo is server rpc method as defined
	GetMemberInfo(ctx context.Context, args *GetMemberInfoReq, reply *GetMemberInfoRsp) (err error)

	// SetMemberInfo is server rpc method as defined
	SetMemberInfo(ctx context.Context, args *SetMemberInfoReq, reply *SetMemberInfoRsp) (err error)
}

// ================== server skeleton ===================
type ChannelImpl struct{}

// ServeForChannel starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForChannel(addr string) error {
	s := server.NewServer()
	s.RegisterName("Channel", new(ChannelImpl), "")
	return s.Serve("tcp", addr)
}

// Sync is server rpc method as defined
func (s *ChannelImpl) Sync(ctx context.Context, args *SyncReq, reply *SyncRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = SyncRsp{}

	return nil
}

// Create is server rpc method as defined
func (s *ChannelImpl) Create(ctx context.Context, args *CreateReq, reply *CreateRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = CreateRsp{}

	return nil
}

// GetJoinedList is server rpc method as defined
func (s *ChannelImpl) GetJoinedList(ctx context.Context, args *GetJoinedListReq, reply *GetJoinedListRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GetJoinedListRsp{}

	return nil
}

// Join is server rpc method as defined
func (s *ChannelImpl) Join(ctx context.Context, args *JoinReq, reply *JoinRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = JoinRsp{}

	return nil
}

// InviteUser is server rpc method as defined
func (s *ChannelImpl) InviteUser(ctx context.Context, args *InviteUserReq, reply *InviteUserRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = InviteUserRsp{}

	return nil
}

// Quit is server rpc method as defined
func (s *ChannelImpl) Quit(ctx context.Context, args *QuitReq, reply *QuitRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = QuitRsp{}

	return nil
}

// Kick is server rpc method as defined
func (s *ChannelImpl) Kick(ctx context.Context, args *KickReq, reply *KickRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = KickRsp{}

	return nil
}

// Dismiss is server rpc method as defined
func (s *ChannelImpl) Dismiss(ctx context.Context, args *DismissReq, reply *DismissRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = DismissRsp{}

	return nil
}

// GetMemberList is server rpc method as defined
func (s *ChannelImpl) GetMemberList(ctx context.Context, args *GetMemberListReq, reply *GetMemberListRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GetMemberListRsp{}

	return nil
}

// GetMemberInfo is server rpc method as defined
func (s *ChannelImpl) GetMemberInfo(ctx context.Context, args *GetMemberInfoReq, reply *GetMemberInfoRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GetMemberInfoRsp{}

	return nil
}

// SetMemberInfo is server rpc method as defined
func (s *ChannelImpl) SetMemberInfo(ctx context.Context, args *SetMemberInfoReq, reply *SetMemberInfoRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = SetMemberInfoRsp{}

	return nil
}

//================== client stub ===================
// Channel is a client wrapped XClient.
type ChannelClient struct {
	xclient client.XClient
}

// NewChannelClient wraps a XClient as ChannelClient.
// You can pass a shared XClient object created by NewXClientForChannel.
func NewChannelClient(xclient client.XClient) *ChannelClient {
	return &ChannelClient{xclient: xclient}
}

// NewXClientForChannel creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForChannel(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("Channel", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// Sync is client rpc method as defined
func (c *ChannelClient) Sync(ctx context.Context, args *SyncReq) (reply *SyncRsp, err error) {
	reply = &SyncRsp{}
	err = c.xclient.Call(ctx, "Sync", args, reply)
	return reply, err
}

// Create is client rpc method as defined
func (c *ChannelClient) Create(ctx context.Context, args *CreateReq) (reply *CreateRsp, err error) {
	reply = &CreateRsp{}
	err = c.xclient.Call(ctx, "Create", args, reply)
	return reply, err
}

// GetJoinedList is client rpc method as defined
func (c *ChannelClient) GetJoinedList(ctx context.Context, args *GetJoinedListReq) (reply *GetJoinedListRsp, err error) {
	reply = &GetJoinedListRsp{}
	err = c.xclient.Call(ctx, "GetJoinedList", args, reply)
	return reply, err
}

// Join is client rpc method as defined
func (c *ChannelClient) Join(ctx context.Context, args *JoinReq) (reply *JoinRsp, err error) {
	reply = &JoinRsp{}
	err = c.xclient.Call(ctx, "Join", args, reply)
	return reply, err
}

// InviteUser is client rpc method as defined
func (c *ChannelClient) InviteUser(ctx context.Context, args *InviteUserReq) (reply *InviteUserRsp, err error) {
	reply = &InviteUserRsp{}
	err = c.xclient.Call(ctx, "InviteUser", args, reply)
	return reply, err
}

// Quit is client rpc method as defined
func (c *ChannelClient) Quit(ctx context.Context, args *QuitReq) (reply *QuitRsp, err error) {
	reply = &QuitRsp{}
	err = c.xclient.Call(ctx, "Quit", args, reply)
	return reply, err
}

// Kick is client rpc method as defined
func (c *ChannelClient) Kick(ctx context.Context, args *KickReq) (reply *KickRsp, err error) {
	reply = &KickRsp{}
	err = c.xclient.Call(ctx, "Kick", args, reply)
	return reply, err
}

// Dismiss is client rpc method as defined
func (c *ChannelClient) Dismiss(ctx context.Context, args *DismissReq) (reply *DismissRsp, err error) {
	reply = &DismissRsp{}
	err = c.xclient.Call(ctx, "Dismiss", args, reply)
	return reply, err
}

// GetMemberList is client rpc method as defined
func (c *ChannelClient) GetMemberList(ctx context.Context, args *GetMemberListReq) (reply *GetMemberListRsp, err error) {
	reply = &GetMemberListRsp{}
	err = c.xclient.Call(ctx, "GetMemberList", args, reply)
	return reply, err
}

// GetMemberInfo is client rpc method as defined
func (c *ChannelClient) GetMemberInfo(ctx context.Context, args *GetMemberInfoReq) (reply *GetMemberInfoRsp, err error) {
	reply = &GetMemberInfoRsp{}
	err = c.xclient.Call(ctx, "GetMemberInfo", args, reply)
	return reply, err
}

// SetMemberInfo is client rpc method as defined
func (c *ChannelClient) SetMemberInfo(ctx context.Context, args *SetMemberInfoReq) (reply *SetMemberInfoRsp, err error) {
	reply = &SetMemberInfoRsp{}
	err = c.xclient.Call(ctx, "SetMemberInfo", args, reply)
	return reply, err
}

//================== oneclient stub ===================
// ChannelOneClient is a client wrapped oneClient.
type ChannelOneClient struct {
	serviceName string
	oneclient   *client.OneClient
}

// NewChannelOneClient wraps a OneClient as ChannelOneClient.
// You can pass a shared OneClient object created by NewOneClientForChannel.
func NewChannelOneClient(oneclient *client.OneClient) *ChannelOneClient {
	return &ChannelOneClient{
		serviceName: "Channel",
		oneclient:   oneclient,
	}
}

// ======================================================

// Sync is client rpc method as defined
func (c *ChannelOneClient) Sync(ctx context.Context, args *SyncReq) (reply *SyncRsp, err error) {
	reply = &SyncRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Sync", args, reply)
	return reply, err
}

// Create is client rpc method as defined
func (c *ChannelOneClient) Create(ctx context.Context, args *CreateReq) (reply *CreateRsp, err error) {
	reply = &CreateRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Create", args, reply)
	return reply, err
}

// GetJoinedList is client rpc method as defined
func (c *ChannelOneClient) GetJoinedList(ctx context.Context, args *GetJoinedListReq) (reply *GetJoinedListRsp, err error) {
	reply = &GetJoinedListRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "GetJoinedList", args, reply)
	return reply, err
}

// Join is client rpc method as defined
func (c *ChannelOneClient) Join(ctx context.Context, args *JoinReq) (reply *JoinRsp, err error) {
	reply = &JoinRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Join", args, reply)
	return reply, err
}

// InviteUser is client rpc method as defined
func (c *ChannelOneClient) InviteUser(ctx context.Context, args *InviteUserReq) (reply *InviteUserRsp, err error) {
	reply = &InviteUserRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "InviteUser", args, reply)
	return reply, err
}

// Quit is client rpc method as defined
func (c *ChannelOneClient) Quit(ctx context.Context, args *QuitReq) (reply *QuitRsp, err error) {
	reply = &QuitRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Quit", args, reply)
	return reply, err
}

// Kick is client rpc method as defined
func (c *ChannelOneClient) Kick(ctx context.Context, args *KickReq) (reply *KickRsp, err error) {
	reply = &KickRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Kick", args, reply)
	return reply, err
}

// Dismiss is client rpc method as defined
func (c *ChannelOneClient) Dismiss(ctx context.Context, args *DismissReq) (reply *DismissRsp, err error) {
	reply = &DismissRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Dismiss", args, reply)
	return reply, err
}

// GetMemberList is client rpc method as defined
func (c *ChannelOneClient) GetMemberList(ctx context.Context, args *GetMemberListReq) (reply *GetMemberListRsp, err error) {
	reply = &GetMemberListRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "GetMemberList", args, reply)
	return reply, err
}

// GetMemberInfo is client rpc method as defined
func (c *ChannelOneClient) GetMemberInfo(ctx context.Context, args *GetMemberInfoReq) (reply *GetMemberInfoRsp, err error) {
	reply = &GetMemberInfoRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "GetMemberInfo", args, reply)
	return reply, err
}

// SetMemberInfo is client rpc method as defined
func (c *ChannelOneClient) SetMemberInfo(ctx context.Context, args *SetMemberInfoReq) (reply *SetMemberInfoRsp, err error) {
	reply = &SetMemberInfoRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "SetMemberInfo", args, reply)
	return reply, err
}
